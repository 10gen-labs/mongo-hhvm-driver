<?hh
// @generated by docskel.php

<<__Native>>
function example_sum(int $a, int $b): int;

<<__Native>>
function hello_world(string $statement): string;

<<__Native>>
function sum_all(array<int> $numberArray): int;

/**
 * A connection manager for PHP and MongoDB.   This class is used to create
 * and manage connections. A typical use is:  MongoClient basic usage     
 * See MongoClient::__construct() and the section on connecting for more
 * information about creating connections.
 */
class MongoClient {

  public function __construct ($server = "mongodb://localhost:27017", 
                                 $options = array("connect" => TRUE)): bool {
        return false;
  }

  /**
   * Closes this connection
   *
   * @param boolean|string $connection - connection    If connection is
   *   not given, or FALSE then connection that would be selected for
   *   writes would be closed. In a single-node configuration, that is then
   *   the whole connection, but if you are connected to a replica set,
   *   close() will only close the connection to the primary server.   If
   *   connection is TRUE then all connections as known by the connection
   *   manager will be closed. This can include connections that are not
   *   referenced in the connection string used to create the object that
   *   you are calling close on.   If connection is a string argument, then
   *   it will only close the connection identified by this hash. Hashes
   *   are identifiers for a connection and can be obtained by calling
   *   MongoClient::getConnections().
   *
   * @return bool - Returns if the connection was successfully closed.
   */
  <<__Native>>
  public function close(mixed $connection): bool;

  /**
   * Connects to a database server
   *
   * @return bool - If the connection was successful.
   */
  <<__Native>>
  public function connect(): bool;

  /**
   * Drops a database [deprecated]
   *
   * @param mixed $db - db    The database to drop. Can be a MongoDB
   *   object or the name of the database.
   *
   * @return array - Returns the database response.
   */
  <<__Native>>
  public function dropDB(mixed $db): array;

  /**
   * Gets a database
   *
   * @param string $dbname - dbname    The database name.
   *
   * @return MongoDB - Returns a new db object.
   */
  <<__Native>>
  public function __get(string $dbname): object;

  /**
   * Return info about all open connections
   *
   * @return array - An array of open connections.
   */
  <<__Native>>
  public static function getConnections(): array;

  /**
   * Updates status for all associated hosts
   *
   * @return array - Returns an array of information about the hosts in
   *   the set. Includes each host's hostname, its health (1 is healthy),
   *   its state (1 is primary, 2 is secondary, 0 is anything else), the
   *   amount of time it took to ping the server, and when the last ping
   *   occurred. For example, on a three-member replica set, it might look
   *   something like:
   */
  <<__Native>>
  public function getHosts(): array;

  /**
   * Get the read preference for this connection
   *
   * @return array -
   */
  <<__Native>>
  public function getReadPreference(): array;

  /**
   * Kills a specific cursor on the server
   *
   * @param string $server_hash - server_hash    The server hash that has
   *   the cursor. This can be obtained through MongoCursor::info.
   * @param int|mongoint64 $id - id    The ID of the cursor to kill. You
   *   can either supply an int containing the 64 bit cursor ID, or an
   *   object of the MongoInt64 class. The latter is necessary on 32 bit
   *   platforms (and Windows).
   *
   * @return bool - Returns TRUE if the method attempted to kill a
   *   cursor, and FALSE if there was something wrong with the arguments
   *   (such as a wrong server_hash). The return status does not reflect
   *   where the cursor was actually killed as the server does not provide
   *   that information.
   */
  <<__Native>>
  public function killCursor(string $server_hash,
                           mixed $id): bool;

  /**
   * Lists all of the databases available.
   *
   * @return array - Returns an associative array containing three
   *   fields. The first field is databases, which in turn contains an
   *   array. Each element of the array is an associative array
   *   corresponding to a database, giving th database's name, size, and if
   *   it's empty. The other two fields are totalSize (in bytes) and ok,
   *   which is 1 if this method ran successfully.
   */
  <<__Native>>
  public function listDBs(): array;

  /**
   * Gets a database collection
   *
   * @param string $db - db    The database name.
   * @param string $collection - collection    The collection name.
   *
   * @return MongoCollection - Returns a new collection object.
   */
  <<__Native>>
  public function selectCollection(string $db,
                                   string $collection): object;

  /**
   * Gets a database
   *
   * @param string $name - name    The database name.
   *
   * @return MongoDB - Returns a new database object.
   */
  <<__Native>>
  public function selectDB(string $name): object;

  /**
   * Set the read preference for this connection
   *
   * @param string $read_preference -
   * @param array $tags -
   *
   * @return bool -
   */
  <<__Native>>
  public function setReadPreference(string $read_preference,
                                    array $tags): bool;

  /**
   * String representation of this connection
   *
   * @return string - Returns hostname and port for this connection.
   */
  <<__Native>>
  public function __toString(): string;

}